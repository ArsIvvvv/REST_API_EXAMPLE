// <auto-generated />
using CarAPI.Data.AppDContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250531152652_Update3")]
    partial class Update3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarAPI.Data.Entity.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Fuel")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasDiscriminator<string>("Manufacturer").HasValue("CarEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CarAPI.Data.Entity.BMWEntity", b =>
                {
                    b.HasBaseType("CarAPI.Data.Entity.CarEntity");

                    b.Property<bool>("XDrive")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("BMW");
                });

            modelBuilder.Entity("CarAPI.Data.Entity.MercedesEntity", b =>
                {
                    b.HasBaseType("CarAPI.Data.Entity.CarEntity");

                    b.Property<bool>("WarrantyYears")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Mercedes");
                });

            modelBuilder.Entity("CarAPI.Data.Entity.PorscheEntity", b =>
                {
                    b.HasBaseType("CarAPI.Data.Entity.CarEntity");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Porsche");
                });
#pragma warning restore 612, 618
        }
    }
}
